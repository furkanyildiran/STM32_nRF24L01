
STM32_nRF24L01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001580  08001580  00011580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015b0  080015b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080015b0  080015b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015b0  080015b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015b0  080015b0  000115b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015b4  080015b4  000115b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080015b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080015c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080015c4  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049b1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001055  00000000  00000000  000249e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000540  00000000  00000000  00025a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a8  00000000  00000000  00025f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c6a  00000000  00000000  00026428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000066d7  00000000  00000000  0003e092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089bb2  00000000  00000000  00044769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce31b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001164  00000000  00000000  000ce36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001568 	.word	0x08001568

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001568 	.word	0x08001568

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f95a 	bl	80004dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f805 	bl	8000236 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f882 	bl	8000334 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f842 	bl	80002b8 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	e7fe      	b.n	8000234 <main+0x14>

08000236 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b093      	sub	sp, #76	; 0x4c
 800023a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023c:	2414      	movs	r4, #20
 800023e:	193b      	adds	r3, r7, r4
 8000240:	0018      	movs	r0, r3
 8000242:	2334      	movs	r3, #52	; 0x34
 8000244:	001a      	movs	r2, r3
 8000246:	2100      	movs	r1, #0
 8000248:	f001 f986 	bl	8001558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	0018      	movs	r0, r3
 8000250:	2310      	movs	r3, #16
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f001 f97f 	bl	8001558 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	0021      	movs	r1, r4
 800025c:	187b      	adds	r3, r7, r1
 800025e:	2202      	movs	r2, #2
 8000260:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	187b      	adds	r3, r7, r1
 8000264:	2201      	movs	r2, #1
 8000266:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000268:	187b      	adds	r3, r7, r1
 800026a:	2210      	movs	r2, #16
 800026c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026e:	187b      	adds	r3, r7, r1
 8000270:	2200      	movs	r2, #0
 8000272:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	187b      	adds	r3, r7, r1
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fbc0 	bl	80009fc <HAL_RCC_OscConfig>
 800027c:	1e03      	subs	r3, r0, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000280:	f000 f870 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2207      	movs	r2, #7
 8000288:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2100      	movs	r1, #0
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 ff31 	bl	8001108 <HAL_RCC_ClockConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002aa:	f000 f85b 	bl	8000364 <Error_Handler>
  }
}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	46bd      	mov	sp, r7
 80002b2:	b013      	add	sp, #76	; 0x4c
 80002b4:	bd90      	pop	{r4, r7, pc}
	...

080002b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_SPI1_Init+0x74>)
 80002be:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <MX_SPI1_Init+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_SPI1_Init+0x74>)
 80002c4:	2282      	movs	r2, #130	; 0x82
 80002c6:	0052      	lsls	r2, r2, #1
 80002c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ca:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_SPI1_Init+0x74>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <MX_SPI1_Init+0x74>)
 80002d2:	22c0      	movs	r2, #192	; 0xc0
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_SPI1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <MX_SPI1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_SPI1_Init+0x74>)
 80002e6:	2280      	movs	r2, #128	; 0x80
 80002e8:	0092      	lsls	r2, r2, #2
 80002ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_SPI1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_SPI1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_SPI1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_SPI1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_SPI1_Init+0x74>)
 8000306:	2207      	movs	r2, #7
 8000308:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_SPI1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_SPI1_Init+0x74>)
 8000312:	2208      	movs	r2, #8
 8000314:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <MX_SPI1_Init+0x74>)
 8000318:	0018      	movs	r0, r3
 800031a:	f001 f841 	bl	80013a0 <HAL_SPI_Init>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000322:	f000 f81f 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000028 	.word	0x20000028
 8000330:	40013000 	.word	0x40013000

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MX_GPIO_Init+0x2c>)
 800033c:	695a      	ldr	r2, [r3, #20]
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_GPIO_Init+0x2c>)
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	0289      	lsls	r1, r1, #10
 8000344:	430a      	orrs	r2, r1
 8000346:	615a      	str	r2, [r3, #20]
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <MX_GPIO_Init+0x2c>)
 800034a:	695a      	ldr	r2, [r3, #20]
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	029b      	lsls	r3, r3, #10
 8000350:	4013      	ands	r3, r2
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b002      	add	sp, #8
 800035c:	bd80      	pop	{r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	40021000 	.word	0x40021000

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	e7fe      	b.n	800036c <Error_Handler+0x8>
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_MspInit+0x44>)
 8000378:	699a      	ldr	r2, [r3, #24]
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <HAL_MspInit+0x44>)
 800037c:	2101      	movs	r1, #1
 800037e:	430a      	orrs	r2, r1
 8000380:	619a      	str	r2, [r3, #24]
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_MspInit+0x44>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	2201      	movs	r2, #1
 8000388:	4013      	ands	r3, r2
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <HAL_MspInit+0x44>)
 8000390:	69da      	ldr	r2, [r3, #28]
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <HAL_MspInit+0x44>)
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	0549      	lsls	r1, r1, #21
 8000398:	430a      	orrs	r2, r1
 800039a:	61da      	str	r2, [r3, #28]
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <HAL_MspInit+0x44>)
 800039e:	69da      	ldr	r2, [r3, #28]
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	055b      	lsls	r3, r3, #21
 80003a4:	4013      	ands	r3, r2
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b002      	add	sp, #8
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	40021000 	.word	0x40021000

080003b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b08b      	sub	sp, #44	; 0x2c
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c0:	2414      	movs	r4, #20
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	0018      	movs	r0, r3
 80003c6:	2314      	movs	r3, #20
 80003c8:	001a      	movs	r2, r3
 80003ca:	2100      	movs	r1, #0
 80003cc:	f001 f8c4 	bl	8001558 <memset>
  if(hspi->Instance==SPI1)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a1c      	ldr	r2, [pc, #112]	; (8000448 <HAL_SPI_MspInit+0x90>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d132      	bne.n	8000440 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <HAL_SPI_MspInit+0x94>)
 80003dc:	699a      	ldr	r2, [r3, #24]
 80003de:	4b1b      	ldr	r3, [pc, #108]	; (800044c <HAL_SPI_MspInit+0x94>)
 80003e0:	2180      	movs	r1, #128	; 0x80
 80003e2:	0149      	lsls	r1, r1, #5
 80003e4:	430a      	orrs	r2, r1
 80003e6:	619a      	str	r2, [r3, #24]
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <HAL_SPI_MspInit+0x94>)
 80003ea:	699a      	ldr	r2, [r3, #24]
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	015b      	lsls	r3, r3, #5
 80003f0:	4013      	ands	r3, r2
 80003f2:	613b      	str	r3, [r7, #16]
 80003f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_SPI_MspInit+0x94>)
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <HAL_SPI_MspInit+0x94>)
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0289      	lsls	r1, r1, #10
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <HAL_SPI_MspInit+0x94>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	029b      	lsls	r3, r3, #10
 800040c:	4013      	ands	r3, r2
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000412:	0021      	movs	r1, r4
 8000414:	187b      	adds	r3, r7, r1
 8000416:	22e0      	movs	r2, #224	; 0xe0
 8000418:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2202      	movs	r2, #2
 800041e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2203      	movs	r2, #3
 800042a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2200      	movs	r2, #0
 8000430:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	187a      	adds	r2, r7, r1
 8000434:	2390      	movs	r3, #144	; 0x90
 8000436:	05db      	lsls	r3, r3, #23
 8000438:	0011      	movs	r1, r2
 800043a:	0018      	movs	r0, r3
 800043c:	f000 f966 	bl	800070c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b00b      	add	sp, #44	; 0x2c
 8000446:	bd90      	pop	{r4, r7, pc}
 8000448:	40013000 	.word	0x40013000
 800044c:	40021000 	.word	0x40021000

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <NMI_Handler+0x4>

08000456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <HardFault_Handler+0x4>

0800045c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000474:	f000 f87a 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800048c:	f7ff fff7 	bl	800047e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000492:	490d      	ldr	r1, [pc, #52]	; (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000494:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a8:	4c0a      	ldr	r4, [pc, #40]	; (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b6:	f001 f82b 	bl	8001510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ba:	f7ff feb1 	bl	8000220 <main>

080004be <LoopForever>:

LoopForever:
    b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
  ldr   r0, =_estack
 80004c0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004cc:	080015b8 	.word	0x080015b8
  ldr r2, =_sbss
 80004d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004d4:	20000090 	.word	0x20000090

080004d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_COMP_IRQHandler>
	...

080004dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <HAL_Init+0x24>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <HAL_Init+0x24>)
 80004e6:	2110      	movs	r1, #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 f809 	bl	8000504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f2:	f7ff ff3d 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	0018      	movs	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40022000 	.word	0x40022000

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <HAL_InitTick+0x5c>)
 800050e:	681c      	ldr	r4, [r3, #0]
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_InitTick+0x60>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	0019      	movs	r1, r3
 8000516:	23fa      	movs	r3, #250	; 0xfa
 8000518:	0098      	lsls	r0, r3, #2
 800051a:	f7ff fdf5 	bl	8000108 <__udivsi3>
 800051e:	0003      	movs	r3, r0
 8000520:	0019      	movs	r1, r3
 8000522:	0020      	movs	r0, r4
 8000524:	f7ff fdf0 	bl	8000108 <__udivsi3>
 8000528:	0003      	movs	r3, r0
 800052a:	0018      	movs	r0, r3
 800052c:	f000 f8e1 	bl	80006f2 <HAL_SYSTICK_Config>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	e00f      	b.n	8000558 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d80b      	bhi.n	8000556 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	2301      	movs	r3, #1
 8000542:	425b      	negs	r3, r3
 8000544:	2200      	movs	r2, #0
 8000546:	0018      	movs	r0, r3
 8000548:	f000 f8be 	bl	80006c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_InitTick+0x64>)
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	0018      	movs	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	b003      	add	sp, #12
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	20000000 	.word	0x20000000
 8000564:	20000008 	.word	0x20000008
 8000568:	20000004 	.word	0x20000004

0800056c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <HAL_IncTick+0x1c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	001a      	movs	r2, r3
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_IncTick+0x20>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	18d2      	adds	r2, r2, r3
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <HAL_IncTick+0x20>)
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	20000008 	.word	0x20000008
 800058c:	2000008c 	.word	0x2000008c

08000590 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  return uwTick;
 8000594:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <HAL_GetTick+0x10>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	0018      	movs	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	2000008c 	.word	0x2000008c

080005a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	0002      	movs	r2, r0
 80005ac:	6039      	str	r1, [r7, #0]
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b7f      	cmp	r3, #127	; 0x7f
 80005b8:	d828      	bhi.n	800060c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ba:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <__NVIC_SetPriority+0xd4>)
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	089b      	lsrs	r3, r3, #2
 80005c4:	33c0      	adds	r3, #192	; 0xc0
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	589b      	ldr	r3, [r3, r2]
 80005ca:	1dfa      	adds	r2, r7, #7
 80005cc:	7812      	ldrb	r2, [r2, #0]
 80005ce:	0011      	movs	r1, r2
 80005d0:	2203      	movs	r2, #3
 80005d2:	400a      	ands	r2, r1
 80005d4:	00d2      	lsls	r2, r2, #3
 80005d6:	21ff      	movs	r1, #255	; 0xff
 80005d8:	4091      	lsls	r1, r2
 80005da:	000a      	movs	r2, r1
 80005dc:	43d2      	mvns	r2, r2
 80005de:	401a      	ands	r2, r3
 80005e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	019b      	lsls	r3, r3, #6
 80005e6:	22ff      	movs	r2, #255	; 0xff
 80005e8:	401a      	ands	r2, r3
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	0018      	movs	r0, r3
 80005f0:	2303      	movs	r3, #3
 80005f2:	4003      	ands	r3, r0
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f8:	481f      	ldr	r0, [pc, #124]	; (8000678 <__NVIC_SetPriority+0xd4>)
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	089b      	lsrs	r3, r3, #2
 8000602:	430a      	orrs	r2, r1
 8000604:	33c0      	adds	r3, #192	; 0xc0
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800060a:	e031      	b.n	8000670 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <__NVIC_SetPriority+0xd8>)
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	0019      	movs	r1, r3
 8000614:	230f      	movs	r3, #15
 8000616:	400b      	ands	r3, r1
 8000618:	3b08      	subs	r3, #8
 800061a:	089b      	lsrs	r3, r3, #2
 800061c:	3306      	adds	r3, #6
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	18d3      	adds	r3, r2, r3
 8000622:	3304      	adds	r3, #4
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	1dfa      	adds	r2, r7, #7
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	0011      	movs	r1, r2
 800062c:	2203      	movs	r2, #3
 800062e:	400a      	ands	r2, r1
 8000630:	00d2      	lsls	r2, r2, #3
 8000632:	21ff      	movs	r1, #255	; 0xff
 8000634:	4091      	lsls	r1, r2
 8000636:	000a      	movs	r2, r1
 8000638:	43d2      	mvns	r2, r2
 800063a:	401a      	ands	r2, r3
 800063c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	019b      	lsls	r3, r3, #6
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	401a      	ands	r2, r3
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	0018      	movs	r0, r3
 800064c:	2303      	movs	r3, #3
 800064e:	4003      	ands	r3, r0
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000654:	4809      	ldr	r0, [pc, #36]	; (800067c <__NVIC_SetPriority+0xd8>)
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	001c      	movs	r4, r3
 800065c:	230f      	movs	r3, #15
 800065e:	4023      	ands	r3, r4
 8000660:	3b08      	subs	r3, #8
 8000662:	089b      	lsrs	r3, r3, #2
 8000664:	430a      	orrs	r2, r1
 8000666:	3306      	adds	r3, #6
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	18c3      	adds	r3, r0, r3
 800066c:	3304      	adds	r3, #4
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b003      	add	sp, #12
 8000676:	bd90      	pop	{r4, r7, pc}
 8000678:	e000e100 	.word	0xe000e100
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	045b      	lsls	r3, r3, #17
 8000690:	429a      	cmp	r2, r3
 8000692:	d301      	bcc.n	8000698 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000694:	2301      	movs	r3, #1
 8000696:	e010      	b.n	80006ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <SysTick_Config+0x44>)
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	3a01      	subs	r2, #1
 800069e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006a0:	2301      	movs	r3, #1
 80006a2:	425b      	negs	r3, r3
 80006a4:	2103      	movs	r1, #3
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff ff7c 	bl	80005a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <SysTick_Config+0x44>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <SysTick_Config+0x44>)
 80006b4:	2207      	movs	r2, #7
 80006b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	0018      	movs	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	e000e010 	.word	0xe000e010

080006c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	607a      	str	r2, [r7, #4]
 80006d2:	210f      	movs	r1, #15
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	1c02      	adds	r2, r0, #0
 80006d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f7ff ff5d 	bl	80005a4 <__NVIC_SetPriority>
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b004      	add	sp, #16
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff ffbf 	bl	8000680 <SysTick_Config>
 8000702:	0003      	movs	r3, r0
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	b002      	add	sp, #8
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800071a:	e155      	b.n	80009c8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2101      	movs	r1, #1
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	4091      	lsls	r1, r2
 8000726:	000a      	movs	r2, r1
 8000728:	4013      	ands	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d100      	bne.n	8000734 <HAL_GPIO_Init+0x28>
 8000732:	e146      	b.n	80009c2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	2203      	movs	r2, #3
 800073a:	4013      	ands	r3, r2
 800073c:	2b01      	cmp	r3, #1
 800073e:	d005      	beq.n	800074c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	2203      	movs	r2, #3
 8000746:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000748:	2b02      	cmp	r3, #2
 800074a:	d130      	bne.n	80007ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	2203      	movs	r2, #3
 8000758:	409a      	lsls	r2, r3
 800075a:	0013      	movs	r3, r2
 800075c:	43da      	mvns	r2, r3
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	4013      	ands	r3, r2
 8000762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	68da      	ldr	r2, [r3, #12]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	409a      	lsls	r2, r3
 800076e:	0013      	movs	r3, r2
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	4313      	orrs	r3, r2
 8000774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000782:	2201      	movs	r2, #1
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	409a      	lsls	r2, r3
 8000788:	0013      	movs	r3, r2
 800078a:	43da      	mvns	r2, r3
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	4013      	ands	r3, r2
 8000790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	091b      	lsrs	r3, r3, #4
 8000798:	2201      	movs	r2, #1
 800079a:	401a      	ands	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	409a      	lsls	r2, r3
 80007a0:	0013      	movs	r3, r2
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2203      	movs	r2, #3
 80007b4:	4013      	ands	r3, r2
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d017      	beq.n	80007ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	2203      	movs	r2, #3
 80007c6:	409a      	lsls	r2, r3
 80007c8:	0013      	movs	r3, r2
 80007ca:	43da      	mvns	r2, r3
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	4013      	ands	r3, r2
 80007d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	409a      	lsls	r2, r3
 80007dc:	0013      	movs	r3, r2
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	2203      	movs	r2, #3
 80007f0:	4013      	ands	r3, r2
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d123      	bne.n	800083e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	08da      	lsrs	r2, r3, #3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3208      	adds	r2, #8
 80007fe:	0092      	lsls	r2, r2, #2
 8000800:	58d3      	ldr	r3, [r2, r3]
 8000802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	2207      	movs	r2, #7
 8000808:	4013      	ands	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	220f      	movs	r2, #15
 800080e:	409a      	lsls	r2, r3
 8000810:	0013      	movs	r3, r2
 8000812:	43da      	mvns	r2, r3
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	4013      	ands	r3, r2
 8000818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	691a      	ldr	r2, [r3, #16]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	2107      	movs	r1, #7
 8000822:	400b      	ands	r3, r1
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	409a      	lsls	r2, r3
 8000828:	0013      	movs	r3, r2
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	4313      	orrs	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	08da      	lsrs	r2, r3, #3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3208      	adds	r2, #8
 8000838:	0092      	lsls	r2, r2, #2
 800083a:	6939      	ldr	r1, [r7, #16]
 800083c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	2203      	movs	r2, #3
 800084a:	409a      	lsls	r2, r3
 800084c:	0013      	movs	r3, r2
 800084e:	43da      	mvns	r2, r3
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	4013      	ands	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2203      	movs	r2, #3
 800085c:	401a      	ands	r2, r3
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	409a      	lsls	r2, r3
 8000864:	0013      	movs	r3, r2
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4313      	orrs	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	23c0      	movs	r3, #192	; 0xc0
 8000878:	029b      	lsls	r3, r3, #10
 800087a:	4013      	ands	r3, r2
 800087c:	d100      	bne.n	8000880 <HAL_GPIO_Init+0x174>
 800087e:	e0a0      	b.n	80009c2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000880:	4b57      	ldr	r3, [pc, #348]	; (80009e0 <HAL_GPIO_Init+0x2d4>)
 8000882:	699a      	ldr	r2, [r3, #24]
 8000884:	4b56      	ldr	r3, [pc, #344]	; (80009e0 <HAL_GPIO_Init+0x2d4>)
 8000886:	2101      	movs	r1, #1
 8000888:	430a      	orrs	r2, r1
 800088a:	619a      	str	r2, [r3, #24]
 800088c:	4b54      	ldr	r3, [pc, #336]	; (80009e0 <HAL_GPIO_Init+0x2d4>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	2201      	movs	r2, #1
 8000892:	4013      	ands	r3, r2
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000898:	4a52      	ldr	r2, [pc, #328]	; (80009e4 <HAL_GPIO_Init+0x2d8>)
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	089b      	lsrs	r3, r3, #2
 800089e:	3302      	adds	r3, #2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	589b      	ldr	r3, [r3, r2]
 80008a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	2203      	movs	r2, #3
 80008aa:	4013      	ands	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	220f      	movs	r2, #15
 80008b0:	409a      	lsls	r2, r3
 80008b2:	0013      	movs	r3, r2
 80008b4:	43da      	mvns	r2, r3
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	2390      	movs	r3, #144	; 0x90
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d019      	beq.n	80008fa <HAL_GPIO_Init+0x1ee>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a47      	ldr	r2, [pc, #284]	; (80009e8 <HAL_GPIO_Init+0x2dc>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d013      	beq.n	80008f6 <HAL_GPIO_Init+0x1ea>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a46      	ldr	r2, [pc, #280]	; (80009ec <HAL_GPIO_Init+0x2e0>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d00d      	beq.n	80008f2 <HAL_GPIO_Init+0x1e6>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a45      	ldr	r2, [pc, #276]	; (80009f0 <HAL_GPIO_Init+0x2e4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d007      	beq.n	80008ee <HAL_GPIO_Init+0x1e2>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a44      	ldr	r2, [pc, #272]	; (80009f4 <HAL_GPIO_Init+0x2e8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d101      	bne.n	80008ea <HAL_GPIO_Init+0x1de>
 80008e6:	2304      	movs	r3, #4
 80008e8:	e008      	b.n	80008fc <HAL_GPIO_Init+0x1f0>
 80008ea:	2305      	movs	r3, #5
 80008ec:	e006      	b.n	80008fc <HAL_GPIO_Init+0x1f0>
 80008ee:	2303      	movs	r3, #3
 80008f0:	e004      	b.n	80008fc <HAL_GPIO_Init+0x1f0>
 80008f2:	2302      	movs	r3, #2
 80008f4:	e002      	b.n	80008fc <HAL_GPIO_Init+0x1f0>
 80008f6:	2301      	movs	r3, #1
 80008f8:	e000      	b.n	80008fc <HAL_GPIO_Init+0x1f0>
 80008fa:	2300      	movs	r3, #0
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	2103      	movs	r1, #3
 8000900:	400a      	ands	r2, r1
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	4093      	lsls	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800090c:	4935      	ldr	r1, [pc, #212]	; (80009e4 <HAL_GPIO_Init+0x2d8>)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	089b      	lsrs	r3, r3, #2
 8000912:	3302      	adds	r3, #2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800091a:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <HAL_GPIO_Init+0x2ec>)
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	43da      	mvns	r2, r3
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	035b      	lsls	r3, r3, #13
 8000932:	4013      	ands	r3, r2
 8000934:	d003      	beq.n	800093e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4313      	orrs	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <HAL_GPIO_Init+0x2ec>)
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <HAL_GPIO_Init+0x2ec>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	43da      	mvns	r2, r3
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	039b      	lsls	r3, r3, #14
 800095c:	4013      	ands	r3, r2
 800095e:	d003      	beq.n	8000968 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <HAL_GPIO_Init+0x2ec>)
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <HAL_GPIO_Init+0x2ec>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	43da      	mvns	r2, r3
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	029b      	lsls	r3, r3, #10
 8000986:	4013      	ands	r3, r2
 8000988:	d003      	beq.n	8000992 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_GPIO_Init+0x2ec>)
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_GPIO_Init+0x2ec>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	43da      	mvns	r2, r3
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	025b      	lsls	r3, r3, #9
 80009b0:	4013      	ands	r3, r2
 80009b2:	d003      	beq.n	80009bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_GPIO_Init+0x2ec>)
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	40da      	lsrs	r2, r3
 80009d0:	1e13      	subs	r3, r2, #0
 80009d2:	d000      	beq.n	80009d6 <HAL_GPIO_Init+0x2ca>
 80009d4:	e6a2      	b.n	800071c <HAL_GPIO_Init+0x10>
  } 
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b006      	add	sp, #24
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010000 	.word	0x40010000
 80009e8:	48000400 	.word	0x48000400
 80009ec:	48000800 	.word	0x48000800
 80009f0:	48000c00 	.word	0x48000c00
 80009f4:	48001000 	.word	0x48001000
 80009f8:	40010400 	.word	0x40010400

080009fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	f000 fb76 	bl	80010fc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2201      	movs	r2, #1
 8000a16:	4013      	ands	r3, r2
 8000a18:	d100      	bne.n	8000a1c <HAL_RCC_OscConfig+0x20>
 8000a1a:	e08e      	b.n	8000b3a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a1c:	4bc5      	ldr	r3, [pc, #788]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	220c      	movs	r2, #12
 8000a22:	4013      	ands	r3, r2
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d00e      	beq.n	8000a46 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a28:	4bc2      	ldr	r3, [pc, #776]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	220c      	movs	r2, #12
 8000a2e:	4013      	ands	r3, r2
 8000a30:	2b08      	cmp	r3, #8
 8000a32:	d117      	bne.n	8000a64 <HAL_RCC_OscConfig+0x68>
 8000a34:	4bbf      	ldr	r3, [pc, #764]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	23c0      	movs	r3, #192	; 0xc0
 8000a3a:	025b      	lsls	r3, r3, #9
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	025b      	lsls	r3, r3, #9
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d10e      	bne.n	8000a64 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a46:	4bbb      	ldr	r3, [pc, #748]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	029b      	lsls	r3, r3, #10
 8000a4e:	4013      	ands	r3, r2
 8000a50:	d100      	bne.n	8000a54 <HAL_RCC_OscConfig+0x58>
 8000a52:	e071      	b.n	8000b38 <HAL_RCC_OscConfig+0x13c>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d000      	beq.n	8000a5e <HAL_RCC_OscConfig+0x62>
 8000a5c:	e06c      	b.n	8000b38 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	f000 fb4c 	bl	80010fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d107      	bne.n	8000a7c <HAL_RCC_OscConfig+0x80>
 8000a6c:	4bb1      	ldr	r3, [pc, #708]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4bb0      	ldr	r3, [pc, #704]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	0249      	lsls	r1, r1, #9
 8000a76:	430a      	orrs	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	e02f      	b.n	8000adc <HAL_RCC_OscConfig+0xe0>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10c      	bne.n	8000a9e <HAL_RCC_OscConfig+0xa2>
 8000a84:	4bab      	ldr	r3, [pc, #684]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4baa      	ldr	r3, [pc, #680]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000a8a:	49ab      	ldr	r1, [pc, #684]	; (8000d38 <HAL_RCC_OscConfig+0x33c>)
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	4ba8      	ldr	r3, [pc, #672]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4ba7      	ldr	r3, [pc, #668]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000a96:	49a9      	ldr	r1, [pc, #676]	; (8000d3c <HAL_RCC_OscConfig+0x340>)
 8000a98:	400a      	ands	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	e01e      	b.n	8000adc <HAL_RCC_OscConfig+0xe0>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b05      	cmp	r3, #5
 8000aa4:	d10e      	bne.n	8000ac4 <HAL_RCC_OscConfig+0xc8>
 8000aa6:	4ba3      	ldr	r3, [pc, #652]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4ba2      	ldr	r3, [pc, #648]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	02c9      	lsls	r1, r1, #11
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	4b9f      	ldr	r3, [pc, #636]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b9e      	ldr	r3, [pc, #632]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	0249      	lsls	r1, r1, #9
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	e00b      	b.n	8000adc <HAL_RCC_OscConfig+0xe0>
 8000ac4:	4b9b      	ldr	r3, [pc, #620]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b9a      	ldr	r3, [pc, #616]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000aca:	499b      	ldr	r1, [pc, #620]	; (8000d38 <HAL_RCC_OscConfig+0x33c>)
 8000acc:	400a      	ands	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	4b98      	ldr	r3, [pc, #608]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b97      	ldr	r3, [pc, #604]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000ad6:	4999      	ldr	r1, [pc, #612]	; (8000d3c <HAL_RCC_OscConfig+0x340>)
 8000ad8:	400a      	ands	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d014      	beq.n	8000b0e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fd54 	bl	8000590 <HAL_GetTick>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aec:	e008      	b.n	8000b00 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aee:	f7ff fd4f 	bl	8000590 <HAL_GetTick>
 8000af2:	0002      	movs	r2, r0
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	2b64      	cmp	r3, #100	; 0x64
 8000afa:	d901      	bls.n	8000b00 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000afc:	2303      	movs	r3, #3
 8000afe:	e2fd      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b00:	4b8c      	ldr	r3, [pc, #560]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	029b      	lsls	r3, r3, #10
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d0f0      	beq.n	8000aee <HAL_RCC_OscConfig+0xf2>
 8000b0c:	e015      	b.n	8000b3a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fd3f 	bl	8000590 <HAL_GetTick>
 8000b12:	0003      	movs	r3, r0
 8000b14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b16:	e008      	b.n	8000b2a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b18:	f7ff fd3a 	bl	8000590 <HAL_GetTick>
 8000b1c:	0002      	movs	r2, r0
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b64      	cmp	r3, #100	; 0x64
 8000b24:	d901      	bls.n	8000b2a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000b26:	2303      	movs	r3, #3
 8000b28:	e2e8      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b2a:	4b82      	ldr	r3, [pc, #520]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	029b      	lsls	r3, r3, #10
 8000b32:	4013      	ands	r3, r2
 8000b34:	d1f0      	bne.n	8000b18 <HAL_RCC_OscConfig+0x11c>
 8000b36:	e000      	b.n	8000b3a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2202      	movs	r2, #2
 8000b40:	4013      	ands	r3, r2
 8000b42:	d100      	bne.n	8000b46 <HAL_RCC_OscConfig+0x14a>
 8000b44:	e06c      	b.n	8000c20 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b46:	4b7b      	ldr	r3, [pc, #492]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	d00e      	beq.n	8000b6e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b50:	4b78      	ldr	r3, [pc, #480]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	220c      	movs	r2, #12
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d11f      	bne.n	8000b9c <HAL_RCC_OscConfig+0x1a0>
 8000b5c:	4b75      	ldr	r3, [pc, #468]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	23c0      	movs	r3, #192	; 0xc0
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	401a      	ands	r2, r3
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	021b      	lsls	r3, r3, #8
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d116      	bne.n	8000b9c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b6e:	4b71      	ldr	r3, [pc, #452]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2202      	movs	r2, #2
 8000b74:	4013      	ands	r3, r2
 8000b76:	d005      	beq.n	8000b84 <HAL_RCC_OscConfig+0x188>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d001      	beq.n	8000b84 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e2bb      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b84:	4b6b      	ldr	r3, [pc, #428]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	22f8      	movs	r2, #248	; 0xf8
 8000b8a:	4393      	bics	r3, r2
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	00da      	lsls	r2, r3, #3
 8000b94:	4b67      	ldr	r3, [pc, #412]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000b96:	430a      	orrs	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b9a:	e041      	b.n	8000c20 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d024      	beq.n	8000bee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ba4:	4b63      	ldr	r3, [pc, #396]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b62      	ldr	r3, [pc, #392]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fcee 	bl	8000590 <HAL_GetTick>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb8:	e008      	b.n	8000bcc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bba:	f7ff fce9 	bl	8000590 <HAL_GetTick>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e297      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bcc:	4b59      	ldr	r3, [pc, #356]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	d0f1      	beq.n	8000bba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd6:	4b57      	ldr	r3, [pc, #348]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	22f8      	movs	r2, #248	; 0xf8
 8000bdc:	4393      	bics	r3, r2
 8000bde:	0019      	movs	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	00da      	lsls	r2, r3, #3
 8000be6:	4b53      	ldr	r3, [pc, #332]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e018      	b.n	8000c20 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bee:	4b51      	ldr	r3, [pc, #324]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4b50      	ldr	r3, [pc, #320]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	438a      	bics	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bfa:	f7ff fcc9 	bl	8000590 <HAL_GetTick>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c02:	e008      	b.n	8000c16 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c04:	f7ff fcc4 	bl	8000590 <HAL_GetTick>
 8000c08:	0002      	movs	r2, r0
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e272      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c16:	4b47      	ldr	r3, [pc, #284]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	d1f1      	bne.n	8000c04 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2208      	movs	r2, #8
 8000c26:	4013      	ands	r3, r2
 8000c28:	d036      	beq.n	8000c98 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d019      	beq.n	8000c66 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c32:	4b40      	ldr	r3, [pc, #256]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c36:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000c38:	2101      	movs	r1, #1
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c3e:	f7ff fca7 	bl	8000590 <HAL_GetTick>
 8000c42:	0003      	movs	r3, r0
 8000c44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c48:	f7ff fca2 	bl	8000590 <HAL_GetTick>
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e250      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c5a:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	2202      	movs	r2, #2
 8000c60:	4013      	ands	r3, r2
 8000c62:	d0f1      	beq.n	8000c48 <HAL_RCC_OscConfig+0x24c>
 8000c64:	e018      	b.n	8000c98 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c66:	4b33      	ldr	r3, [pc, #204]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	438a      	bics	r2, r1
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c72:	f7ff fc8d 	bl	8000590 <HAL_GetTick>
 8000c76:	0003      	movs	r3, r0
 8000c78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c7c:	f7ff fc88 	bl	8000590 <HAL_GetTick>
 8000c80:	0002      	movs	r2, r0
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e236      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c92:	2202      	movs	r2, #2
 8000c94:	4013      	ands	r3, r2
 8000c96:	d1f1      	bne.n	8000c7c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d100      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x2a8>
 8000ca2:	e0b5      	b.n	8000e10 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ca4:	201f      	movs	r0, #31
 8000ca6:	183b      	adds	r3, r7, r0
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cac:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000cae:	69da      	ldr	r2, [r3, #28]
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	055b      	lsls	r3, r3, #21
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d110      	bne.n	8000cda <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000cba:	69da      	ldr	r2, [r3, #28]
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	0549      	lsls	r1, r1, #21
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	61da      	str	r2, [r3, #28]
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000cc8:	69da      	ldr	r2, [r3, #28]
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	055b      	lsls	r3, r3, #21
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000cd4:	183b      	adds	r3, r7, r0
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_RCC_OscConfig+0x344>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d11a      	bne.n	8000d1c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_RCC_OscConfig+0x344>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_RCC_OscConfig+0x344>)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0049      	lsls	r1, r1, #1
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cf4:	f7ff fc4c 	bl	8000590 <HAL_GetTick>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cfe:	f7ff fc47 	bl	8000590 <HAL_GetTick>
 8000d02:	0002      	movs	r2, r0
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b64      	cmp	r3, #100	; 0x64
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e1f5      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_RCC_OscConfig+0x344>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d0f0      	beq.n	8000cfe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10f      	bne.n	8000d44 <HAL_RCC_OscConfig+0x348>
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000d26:	6a1a      	ldr	r2, [r3, #32]
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <HAL_RCC_OscConfig+0x338>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	621a      	str	r2, [r3, #32]
 8000d30:	e036      	b.n	8000da0 <HAL_RCC_OscConfig+0x3a4>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	40021000 	.word	0x40021000
 8000d38:	fffeffff 	.word	0xfffeffff
 8000d3c:	fffbffff 	.word	0xfffbffff
 8000d40:	40007000 	.word	0x40007000
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d10c      	bne.n	8000d66 <HAL_RCC_OscConfig+0x36a>
 8000d4c:	4bca      	ldr	r3, [pc, #808]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d4e:	6a1a      	ldr	r2, [r3, #32]
 8000d50:	4bc9      	ldr	r3, [pc, #804]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	438a      	bics	r2, r1
 8000d56:	621a      	str	r2, [r3, #32]
 8000d58:	4bc7      	ldr	r3, [pc, #796]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d5a:	6a1a      	ldr	r2, [r3, #32]
 8000d5c:	4bc6      	ldr	r3, [pc, #792]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d5e:	2104      	movs	r1, #4
 8000d60:	438a      	bics	r2, r1
 8000d62:	621a      	str	r2, [r3, #32]
 8000d64:	e01c      	b.n	8000da0 <HAL_RCC_OscConfig+0x3a4>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b05      	cmp	r3, #5
 8000d6c:	d10c      	bne.n	8000d88 <HAL_RCC_OscConfig+0x38c>
 8000d6e:	4bc2      	ldr	r3, [pc, #776]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d70:	6a1a      	ldr	r2, [r3, #32]
 8000d72:	4bc1      	ldr	r3, [pc, #772]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d74:	2104      	movs	r1, #4
 8000d76:	430a      	orrs	r2, r1
 8000d78:	621a      	str	r2, [r3, #32]
 8000d7a:	4bbf      	ldr	r3, [pc, #764]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d7c:	6a1a      	ldr	r2, [r3, #32]
 8000d7e:	4bbe      	ldr	r3, [pc, #760]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	430a      	orrs	r2, r1
 8000d84:	621a      	str	r2, [r3, #32]
 8000d86:	e00b      	b.n	8000da0 <HAL_RCC_OscConfig+0x3a4>
 8000d88:	4bbb      	ldr	r3, [pc, #748]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d8a:	6a1a      	ldr	r2, [r3, #32]
 8000d8c:	4bba      	ldr	r3, [pc, #744]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	438a      	bics	r2, r1
 8000d92:	621a      	str	r2, [r3, #32]
 8000d94:	4bb8      	ldr	r3, [pc, #736]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d96:	6a1a      	ldr	r2, [r3, #32]
 8000d98:	4bb7      	ldr	r3, [pc, #732]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	438a      	bics	r2, r1
 8000d9e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d014      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da8:	f7ff fbf2 	bl	8000590 <HAL_GetTick>
 8000dac:	0003      	movs	r3, r0
 8000dae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db0:	e009      	b.n	8000dc6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000db2:	f7ff fbed 	bl	8000590 <HAL_GetTick>
 8000db6:	0002      	movs	r2, r0
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	4aaf      	ldr	r2, [pc, #700]	; (800107c <HAL_RCC_OscConfig+0x680>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e19a      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dc6:	4bac      	ldr	r3, [pc, #688]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d0f0      	beq.n	8000db2 <HAL_RCC_OscConfig+0x3b6>
 8000dd0:	e013      	b.n	8000dfa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fbdd 	bl	8000590 <HAL_GetTick>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dda:	e009      	b.n	8000df0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fbd8 	bl	8000590 <HAL_GetTick>
 8000de0:	0002      	movs	r2, r0
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	4aa5      	ldr	r2, [pc, #660]	; (800107c <HAL_RCC_OscConfig+0x680>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e185      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000df0:	4ba1      	ldr	r3, [pc, #644]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	2202      	movs	r2, #2
 8000df6:	4013      	ands	r3, r2
 8000df8:	d1f0      	bne.n	8000ddc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000dfa:	231f      	movs	r3, #31
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d105      	bne.n	8000e10 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e04:	4b9c      	ldr	r3, [pc, #624]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	4b9b      	ldr	r3, [pc, #620]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e0a:	499d      	ldr	r1, [pc, #628]	; (8001080 <HAL_RCC_OscConfig+0x684>)
 8000e0c:	400a      	ands	r2, r1
 8000e0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2210      	movs	r2, #16
 8000e16:	4013      	ands	r3, r2
 8000e18:	d063      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d12a      	bne.n	8000e78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e22:	4b95      	ldr	r3, [pc, #596]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e26:	4b94      	ldr	r3, [pc, #592]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e28:	2104      	movs	r1, #4
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000e2e:	4b92      	ldr	r3, [pc, #584]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e32:	4b91      	ldr	r3, [pc, #580]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	430a      	orrs	r2, r1
 8000e38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fba9 	bl	8000590 <HAL_GetTick>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e44:	f7ff fba4 	bl	8000590 <HAL_GetTick>
 8000e48:	0002      	movs	r2, r0
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e152      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e56:	4b88      	ldr	r3, [pc, #544]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d0f1      	beq.n	8000e44 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e60:	4b85      	ldr	r3, [pc, #532]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e64:	22f8      	movs	r2, #248	; 0xf8
 8000e66:	4393      	bics	r3, r2
 8000e68:	0019      	movs	r1, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	00da      	lsls	r2, r3, #3
 8000e70:	4b81      	ldr	r3, [pc, #516]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e72:	430a      	orrs	r2, r1
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34
 8000e76:	e034      	b.n	8000ee2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	3305      	adds	r3, #5
 8000e7e:	d111      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000e80:	4b7d      	ldr	r3, [pc, #500]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e84:	4b7c      	ldr	r3, [pc, #496]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e86:	2104      	movs	r1, #4
 8000e88:	438a      	bics	r2, r1
 8000e8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e8c:	4b7a      	ldr	r3, [pc, #488]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e90:	22f8      	movs	r2, #248	; 0xf8
 8000e92:	4393      	bics	r3, r2
 8000e94:	0019      	movs	r1, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	00da      	lsls	r2, r3, #3
 8000e9c:	4b76      	ldr	r3, [pc, #472]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea2:	e01e      	b.n	8000ee2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ea4:	4b74      	ldr	r3, [pc, #464]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ea8:	4b73      	ldr	r3, [pc, #460]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000eaa:	2104      	movs	r1, #4
 8000eac:	430a      	orrs	r2, r1
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000eb0:	4b71      	ldr	r3, [pc, #452]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb4:	4b70      	ldr	r3, [pc, #448]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	438a      	bics	r2, r1
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ebc:	f7ff fb68 	bl	8000590 <HAL_GetTick>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ec6:	f7ff fb63 	bl	8000590 <HAL_GetTick>
 8000eca:	0002      	movs	r2, r0
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e111      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ed8:	4b67      	ldr	r3, [pc, #412]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000edc:	2202      	movs	r2, #2
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d1f1      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d05c      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000eec:	4b62      	ldr	r3, [pc, #392]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	220c      	movs	r2, #12
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b0c      	cmp	r3, #12
 8000ef6:	d00e      	beq.n	8000f16 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000ef8:	4b5f      	ldr	r3, [pc, #380]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	220c      	movs	r2, #12
 8000efe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d114      	bne.n	8000f2e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000f04:	4b5c      	ldr	r3, [pc, #368]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	23c0      	movs	r3, #192	; 0xc0
 8000f0a:	025b      	lsls	r3, r3, #9
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	23c0      	movs	r3, #192	; 0xc0
 8000f10:	025b      	lsls	r3, r3, #9
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d10b      	bne.n	8000f2e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000f16:	4b58      	ldr	r3, [pc, #352]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d040      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x5a8>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d03c      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e0e6      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d01b      	beq.n	8000f6e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000f36:	4b50      	ldr	r3, [pc, #320]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	0249      	lsls	r1, r1, #9
 8000f40:	430a      	orrs	r2, r1
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fb24 	bl	8000590 <HAL_GetTick>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f4e:	f7ff fb1f 	bl	8000590 <HAL_GetTick>
 8000f52:	0002      	movs	r2, r0
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e0cd      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f60:	4b45      	ldr	r3, [pc, #276]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x552>
 8000f6c:	e01b      	b.n	8000fa6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000f6e:	4b42      	ldr	r3, [pc, #264]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f72:	4b41      	ldr	r3, [pc, #260]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000f74:	4943      	ldr	r1, [pc, #268]	; (8001084 <HAL_RCC_OscConfig+0x688>)
 8000f76:	400a      	ands	r2, r1
 8000f78:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fb09 	bl	8000590 <HAL_GetTick>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f84:	f7ff fb04 	bl	8000590 <HAL_GetTick>
 8000f88:	0002      	movs	r2, r0
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e0b2      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	029b      	lsls	r3, r3, #10
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x588>
 8000fa2:	e000      	b.n	8000fa6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000fa4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x5b4>
 8000fae:	e0a4      	b.n	80010fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d100      	bne.n	8000fbe <HAL_RCC_OscConfig+0x5c2>
 8000fbc:	e078      	b.n	80010b0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d14c      	bne.n	8001060 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000fcc:	492e      	ldr	r1, [pc, #184]	; (8001088 <HAL_RCC_OscConfig+0x68c>)
 8000fce:	400a      	ands	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fadd 	bl	8000590 <HAL_GetTick>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fdc:	f7ff fad8 	bl	8000590 <HAL_GetTick>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e086      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	049b      	lsls	r3, r3, #18
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8000ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffe:	220f      	movs	r2, #15
 8001000:	4393      	bics	r3, r2
 8001002:	0019      	movs	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 800100a:	430a      	orrs	r2, r1
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4a1e      	ldr	r2, [pc, #120]	; (800108c <HAL_RCC_OscConfig+0x690>)
 8001014:	4013      	ands	r3, r2
 8001016:	0019      	movs	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	431a      	orrs	r2, r3
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8001024:	430a      	orrs	r2, r1
 8001026:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	0449      	lsls	r1, r1, #17
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff faab 	bl	8000590 <HAL_GetTick>
 800103a:	0003      	movs	r3, r0
 800103c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001040:	f7ff faa6 	bl	8000590 <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e054      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	049b      	lsls	r3, r3, #18
 800105a:	4013      	ands	r3, r2
 800105c:	d0f0      	beq.n	8001040 <HAL_RCC_OscConfig+0x644>
 800105e:	e04c      	b.n	80010fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <HAL_RCC_OscConfig+0x67c>)
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <HAL_RCC_OscConfig+0x68c>)
 8001068:	400a      	ands	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fa90 	bl	8000590 <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001074:	e015      	b.n	80010a2 <HAL_RCC_OscConfig+0x6a6>
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40021000 	.word	0x40021000
 800107c:	00001388 	.word	0x00001388
 8001080:	efffffff 	.word	0xefffffff
 8001084:	fffeffff 	.word	0xfffeffff
 8001088:	feffffff 	.word	0xfeffffff
 800108c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001090:	f7ff fa7e 	bl	8000590 <HAL_GetTick>
 8001094:	0002      	movs	r2, r0
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e02c      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_RCC_OscConfig+0x708>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	049b      	lsls	r3, r3, #18
 80010aa:	4013      	ands	r3, r2
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0x694>
 80010ae:	e024      	b.n	80010fa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e01f      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_RCC_OscConfig+0x708>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_RCC_OscConfig+0x708>)
 80010c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	23c0      	movs	r3, #192	; 0xc0
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	401a      	ands	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d10e      	bne.n	80010f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	220f      	movs	r2, #15
 80010dc:	401a      	ands	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d107      	bne.n	80010f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	23f0      	movs	r3, #240	; 0xf0
 80010ea:	039b      	lsls	r3, r3, #14
 80010ec:	401a      	ands	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d001      	beq.n	80010fa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b008      	add	sp, #32
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0bf      	b.n	800129c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800111c:	4b61      	ldr	r3, [pc, #388]	; (80012a4 <HAL_RCC_ClockConfig+0x19c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2201      	movs	r2, #1
 8001122:	4013      	ands	r3, r2
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d911      	bls.n	800114e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <HAL_RCC_ClockConfig+0x19c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2201      	movs	r2, #1
 8001130:	4393      	bics	r3, r2
 8001132:	0019      	movs	r1, r3
 8001134:	4b5b      	ldr	r3, [pc, #364]	; (80012a4 <HAL_RCC_ClockConfig+0x19c>)
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <HAL_RCC_ClockConfig+0x19c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2201      	movs	r2, #1
 8001142:	4013      	ands	r3, r2
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d001      	beq.n	800114e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0a6      	b.n	800129c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d015      	beq.n	8001184 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2204      	movs	r2, #4
 800115e:	4013      	ands	r3, r2
 8001160:	d006      	beq.n	8001170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001168:	21e0      	movs	r1, #224	; 0xe0
 800116a:	00c9      	lsls	r1, r1, #3
 800116c:	430a      	orrs	r2, r1
 800116e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001170:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	22f0      	movs	r2, #240	; 0xf0
 8001176:	4393      	bics	r3, r2
 8001178:	0019      	movs	r1, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001180:	430a      	orrs	r2, r1
 8001182:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2201      	movs	r2, #1
 800118a:	4013      	ands	r3, r2
 800118c:	d04c      	beq.n	8001228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	029b      	lsls	r3, r3, #10
 800119e:	4013      	ands	r3, r2
 80011a0:	d120      	bne.n	80011e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e07a      	b.n	800129c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ae:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	049b      	lsls	r3, r3, #18
 80011b6:	4013      	ands	r3, r2
 80011b8:	d114      	bne.n	80011e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e06e      	b.n	800129c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 80011c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	029b      	lsls	r3, r3, #10
 80011ce:	4013      	ands	r3, r2
 80011d0:	d108      	bne.n	80011e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e062      	b.n	800129c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2202      	movs	r2, #2
 80011dc:	4013      	ands	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e05b      	b.n	800129c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2203      	movs	r2, #3
 80011ea:	4393      	bics	r3, r2
 80011ec:	0019      	movs	r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 80011f4:	430a      	orrs	r2, r1
 80011f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f8:	f7ff f9ca 	bl	8000590 <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001200:	e009      	b.n	8001216 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001202:	f7ff f9c5 	bl	8000590 <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	4a27      	ldr	r2, [pc, #156]	; (80012ac <HAL_RCC_ClockConfig+0x1a4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e042      	b.n	800129c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	220c      	movs	r2, #12
 800121c:	401a      	ands	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	429a      	cmp	r2, r3
 8001226:	d1ec      	bne.n	8001202 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <HAL_RCC_ClockConfig+0x19c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2201      	movs	r2, #1
 800122e:	4013      	ands	r3, r2
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d211      	bcs.n	800125a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_RCC_ClockConfig+0x19c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2201      	movs	r2, #1
 800123c:	4393      	bics	r3, r2
 800123e:	0019      	movs	r1, r3
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_RCC_ClockConfig+0x19c>)
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_RCC_ClockConfig+0x19c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2201      	movs	r2, #1
 800124e:	4013      	ands	r3, r2
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d001      	beq.n	800125a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e020      	b.n	800129c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2204      	movs	r2, #4
 8001260:	4013      	ands	r3, r2
 8001262:	d009      	beq.n	8001278 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_RCC_ClockConfig+0x1a8>)
 800126a:	4013      	ands	r3, r2
 800126c:	0019      	movs	r1, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001274:	430a      	orrs	r2, r1
 8001276:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001278:	f000 f820 	bl	80012bc <HAL_RCC_GetSysClockFreq>
 800127c:	0001      	movs	r1, r0
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	220f      	movs	r2, #15
 8001286:	4013      	ands	r3, r2
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_RCC_ClockConfig+0x1ac>)
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	000a      	movs	r2, r1
 800128e:	40da      	lsrs	r2, r3
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001292:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001294:	2003      	movs	r0, #3
 8001296:	f7ff f935 	bl	8000504 <HAL_InitTick>
  
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b004      	add	sp, #16
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40022000 	.word	0x40022000
 80012a8:	40021000 	.word	0x40021000
 80012ac:	00001388 	.word	0x00001388
 80012b0:	fffff8ff 	.word	0xfffff8ff
 80012b4:	08001580 	.word	0x08001580
 80012b8:	20000000 	.word	0x20000000

080012bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_RCC_GetSysClockFreq+0xd0>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	220c      	movs	r2, #12
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d046      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0xb8>
 80012e6:	d848      	bhi.n	800137a <HAL_RCC_GetSysClockFreq+0xbe>
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d002      	beq.n	80012f2 <HAL_RCC_GetSysClockFreq+0x36>
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d003      	beq.n	80012f8 <HAL_RCC_GetSysClockFreq+0x3c>
 80012f0:	e043      	b.n	800137a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <HAL_RCC_GetSysClockFreq+0xd4>)
 80012f4:	613b      	str	r3, [r7, #16]
      break;
 80012f6:	e043      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	0c9b      	lsrs	r3, r3, #18
 80012fc:	220f      	movs	r2, #15
 80012fe:	4013      	ands	r3, r2
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130a:	220f      	movs	r2, #15
 800130c:	4013      	ands	r3, r2
 800130e:	4a22      	ldr	r2, [pc, #136]	; (8001398 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	23c0      	movs	r3, #192	; 0xc0
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	401a      	ands	r2, r3
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	429a      	cmp	r2, r3
 8001322:	d109      	bne.n	8001338 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	481a      	ldr	r0, [pc, #104]	; (8001390 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001328:	f7fe feee 	bl	8000108 <__udivsi3>
 800132c:	0003      	movs	r3, r0
 800132e:	001a      	movs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4353      	muls	r3, r2
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	e01a      	b.n	800136e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	23c0      	movs	r3, #192	; 0xc0
 800133c:	025b      	lsls	r3, r3, #9
 800133e:	401a      	ands	r2, r3
 8001340:	23c0      	movs	r3, #192	; 0xc0
 8001342:	025b      	lsls	r3, r3, #9
 8001344:	429a      	cmp	r2, r3
 8001346:	d109      	bne.n	800135c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <HAL_RCC_GetSysClockFreq+0xe0>)
 800134c:	f7fe fedc 	bl	8000108 <__udivsi3>
 8001350:	0003      	movs	r3, r0
 8001352:	001a      	movs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4353      	muls	r3, r2
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e008      	b.n	800136e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	480c      	ldr	r0, [pc, #48]	; (8001390 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001360:	f7fe fed2 	bl	8000108 <__udivsi3>
 8001364:	0003      	movs	r3, r0
 8001366:	001a      	movs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4353      	muls	r3, r2
 800136c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	613b      	str	r3, [r7, #16]
      break;
 8001372:	e005      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001376:	613b      	str	r3, [r7, #16]
      break;
 8001378:	e002      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_RCC_GetSysClockFreq+0xd4>)
 800137c:	613b      	str	r3, [r7, #16]
      break;
 800137e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001380:	693b      	ldr	r3, [r7, #16]
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b006      	add	sp, #24
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	40021000 	.word	0x40021000
 8001390:	007a1200 	.word	0x007a1200
 8001394:	08001590 	.word	0x08001590
 8001398:	080015a0 	.word	0x080015a0
 800139c:	02dc6c00 	.word	0x02dc6c00

080013a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0a8      	b.n	8001504 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	2382      	movs	r3, #130	; 0x82
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d009      	beq.n	80013da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	61da      	str	r2, [r3, #28]
 80013cc:	e005      	b.n	80013da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	225d      	movs	r2, #93	; 0x5d
 80013e4:	5c9b      	ldrb	r3, [r3, r2]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d107      	bne.n	80013fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	225c      	movs	r2, #92	; 0x5c
 80013f0:	2100      	movs	r1, #0
 80013f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7fe ffde 	bl	80003b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	225d      	movs	r2, #93	; 0x5d
 8001400:	2102      	movs	r1, #2
 8001402:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2140      	movs	r1, #64	; 0x40
 8001410:	438a      	bics	r2, r1
 8001412:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	23e0      	movs	r3, #224	; 0xe0
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	429a      	cmp	r2, r3
 800141e:	d902      	bls.n	8001426 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e002      	b.n	800142c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	015b      	lsls	r3, r3, #5
 800142a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	23f0      	movs	r3, #240	; 0xf0
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	429a      	cmp	r2, r3
 8001436:	d008      	beq.n	800144a <HAL_SPI_Init+0xaa>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	23e0      	movs	r3, #224	; 0xe0
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	429a      	cmp	r2, r3
 8001442:	d002      	beq.n	800144a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	2382      	movs	r3, #130	; 0x82
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	401a      	ands	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6899      	ldr	r1, [r3, #8]
 8001458:	2384      	movs	r3, #132	; 0x84
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	400b      	ands	r3, r1
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	2102      	movs	r1, #2
 8001466:	400b      	ands	r3, r1
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	2101      	movs	r1, #1
 8001470:	400b      	ands	r3, r1
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6999      	ldr	r1, [r3, #24]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	400b      	ands	r3, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2138      	movs	r1, #56	; 0x38
 8001486:	400b      	ands	r3, r1
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	400b      	ands	r3, r1
 8001492:	431a      	orrs	r2, r3
 8001494:	0011      	movs	r1, r2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	401a      	ands	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	0c1b      	lsrs	r3, r3, #16
 80014ae:	2204      	movs	r2, #4
 80014b0:	401a      	ands	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2110      	movs	r1, #16
 80014b8:	400b      	ands	r3, r1
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c0:	2108      	movs	r1, #8
 80014c2:	400b      	ands	r3, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68d9      	ldr	r1, [r3, #12]
 80014ca:	23f0      	movs	r3, #240	; 0xf0
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	400b      	ands	r3, r1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	0011      	movs	r1, r2
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	015b      	lsls	r3, r3, #5
 80014da:	401a      	ands	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69da      	ldr	r2, [r3, #28]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4907      	ldr	r1, [pc, #28]	; (800150c <HAL_SPI_Init+0x16c>)
 80014f0:	400a      	ands	r2, r1
 80014f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	225d      	movs	r2, #93	; 0x5d
 80014fe:	2101      	movs	r1, #1
 8001500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b004      	add	sp, #16
 800150a:	bd80      	pop	{r7, pc}
 800150c:	fffff7ff 	.word	0xfffff7ff

08001510 <__libc_init_array>:
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	2600      	movs	r6, #0
 8001514:	4d0c      	ldr	r5, [pc, #48]	; (8001548 <__libc_init_array+0x38>)
 8001516:	4c0d      	ldr	r4, [pc, #52]	; (800154c <__libc_init_array+0x3c>)
 8001518:	1b64      	subs	r4, r4, r5
 800151a:	10a4      	asrs	r4, r4, #2
 800151c:	42a6      	cmp	r6, r4
 800151e:	d109      	bne.n	8001534 <__libc_init_array+0x24>
 8001520:	2600      	movs	r6, #0
 8001522:	f000 f821 	bl	8001568 <_init>
 8001526:	4d0a      	ldr	r5, [pc, #40]	; (8001550 <__libc_init_array+0x40>)
 8001528:	4c0a      	ldr	r4, [pc, #40]	; (8001554 <__libc_init_array+0x44>)
 800152a:	1b64      	subs	r4, r4, r5
 800152c:	10a4      	asrs	r4, r4, #2
 800152e:	42a6      	cmp	r6, r4
 8001530:	d105      	bne.n	800153e <__libc_init_array+0x2e>
 8001532:	bd70      	pop	{r4, r5, r6, pc}
 8001534:	00b3      	lsls	r3, r6, #2
 8001536:	58eb      	ldr	r3, [r5, r3]
 8001538:	4798      	blx	r3
 800153a:	3601      	adds	r6, #1
 800153c:	e7ee      	b.n	800151c <__libc_init_array+0xc>
 800153e:	00b3      	lsls	r3, r6, #2
 8001540:	58eb      	ldr	r3, [r5, r3]
 8001542:	4798      	blx	r3
 8001544:	3601      	adds	r6, #1
 8001546:	e7f2      	b.n	800152e <__libc_init_array+0x1e>
 8001548:	080015b0 	.word	0x080015b0
 800154c:	080015b0 	.word	0x080015b0
 8001550:	080015b0 	.word	0x080015b0
 8001554:	080015b4 	.word	0x080015b4

08001558 <memset>:
 8001558:	0003      	movs	r3, r0
 800155a:	1882      	adds	r2, r0, r2
 800155c:	4293      	cmp	r3, r2
 800155e:	d100      	bne.n	8001562 <memset+0xa>
 8001560:	4770      	bx	lr
 8001562:	7019      	strb	r1, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	e7f9      	b.n	800155c <memset+0x4>

08001568 <_init>:
 8001568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156e:	bc08      	pop	{r3}
 8001570:	469e      	mov	lr, r3
 8001572:	4770      	bx	lr

08001574 <_fini>:
 8001574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157a:	bc08      	pop	{r3}
 800157c:	469e      	mov	lr, r3
 800157e:	4770      	bx	lr
